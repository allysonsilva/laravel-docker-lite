[xdebug]
zend_extension=xdebug.so

;;;
; Variable Display
;;;

; Xdebug will color var_dumps and stack traces output when in CLI mode and when the output is a tty.
xdebug.cli_color=1

; Errors will always be displayed, no matter what the setting of PHP's display_errors is.
xdebug.force_display_errors=1

; Controls whether Xdebug should collect the parameters passed
; to functions when a function call is recorded in either the function trace or the stack trace.
xdebug.collect_params=4

; This setting tells Xdebug to gather information about which variables are used in a certain scope.
xdebug.collect_vars=1

; These seven settings control which data from the superglobals is shown when an error situation occurs.
xdebug.dump.SERVER=REMOTE_ADDR,REQUEST_METHOD,REQUEST_URI
xdebug.dump.COOKIES=*
xdebug.dump.FILES=*
xdebug.dump.GET=*
xdebug.dump.POST=*
xdebug.dump.REQUEST=*
xdebug.dump.SESSION=*

; Xdebug will show a stack trace whenever an Error is raised.
xdebug.show_error_trace=1

; Xdebug will show a stack trace whenever an Exception or Error is raised.
xdebug.show_exception_trace=1

; Xdebug's generated stack dumps in error situations will also show all variables in the top-most scope.
xdebug.show_local_vars=1

; Controls whether Xdebug should write the return value of function calls to the trace files.
xdebug.collect_return=1

; Controls whether Xdebug should add variable assignments to function traces.
xdebug.collect_assignments=1

;;;
; Profiling PHP Scripts
;;;

; When this setting is set to 1, you can trigger the generation of profiler files by using the XDEBUG_PROFILE GET/POST parameter,
; or set a cookie with the name XDEBUG_PROFILE.
xdebug.profiler_enable_trigger=1

; This setting can be used to restrict who can make use of the XDEBUG_PROFILE functionality as outlined in xdebug.profiler_enable_trigger.
; ?XDEBUG_PROFILE=XDEBUG_PROFILE
xdebug.profiler_enable_trigger_value="XDEBUG_PROFILE"

; This setting determines the name of the file that is used to dump traces into.
xdebug.profiler_output_name=PHPXdebugCachegrind.out.%H.%p.%t

;;;
; Remote debugging
;;;

; Controls which IDE Key Xdebug should pass on to the DBGp debugger handler.
; ?XDEBUG_SESSION_START=IDEKEYXDEBUG
xdebug.idekey=IDEKEYXDEBUG

; Xdebug will disable the @ (shut-up) operator so that notices, warnings and errors are no longer hidden.
xdebug.scream=0

; This switch controls whether Xdebug should try to contact a debug client which is listening on the host and port as
; set with the settings xdebug.remote_host and xdebug.remote_port.
xdebug.remote_enable=1

; Stacktraces will be shown by default on an error event.
xdebug.default_enable=1

; Selects the host where the debug client is running, you can either use a host name, IP address, or 'unix:///path/to/sock' for a Unix domain socket.
; This setting is ignored if xdebug.remote_connect_back is enabled.
xdebug.remote_host=host.docker.internal

; The port to which Xdebug tries to connect on the remote host.
xdebug.remote_port=9001

; Normally you need to use a specific HTTP GET/POST variable to start remote debugging.
xdebug.remote_autostart=0

; If enabled, the xdebug.remote_host setting is ignored and Xdebug will try to connect to the client that made the HTTP request.
xdebug.remote_connect_back=0
